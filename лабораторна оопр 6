abstract class Expression {

    private static $keycount = 0;
    private $key;

    abstract function interpret(InterpreterContext $context);

    function getKey() {
        if (!isset($this->key)) {
            self::$keycount++;
            $this->key = self::$keycount;
        }
        return $this->key;
    }

}

class LitralExpr extends Expression {

    private $value;

    function __construct($value) {
        $this->value = $value;
    }

    public function interpret(InterpreterContext $context) {
        $context->replace($this, $this->value);
    }

}

class InterpreterContext {

    private $exprstore = array();

    function replace(Expression $exp, $value) {
        $this->exprstore[$exp->getKey()] = $value;
    }

    function lookup(Expression $exp) {
        return $this->exprstore[$exp->getKey()];
    }

}
